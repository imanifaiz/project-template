#!/usr/bin/env bash

# Default project directory
project_dir="/var/www/project-template"

# Function to pull latest codes from a specific branch
pull_latest_codes() {
    local branch=$1
    echo "Pulling latest codes from $branch branch..."
    git fetch origin "$branch" && git checkout "$branch" && git pull origin "$branch"
}

# Function to display script usage
display_help() {
    echo "Usage: deploy [OPTIONS]"
    echo "Options:"
    echo "  -t, --tag              Checkout latest tag"
    echo "  -b, --branch BRANCH    Checkout specific branch"
    echo "  -d, --directory DIR    Project directory path (default: /var/www/project-template)"
    echo "  -h, --help             Display this help message"
    echo " "
    exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -t|--tag)
            tag="latest"
            shift
            ;;
        -b|--branch)
            branch="$2"
            shift 2
            ;;
        -d|--directory)
            project_dir="$2"
            shift 2
            ;;
        -h|--help)
            display_help
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Check if provided project directory exists
if [[ ! -d "$project_dir" ]]; then
    echo "Error: Project directory '$project_dir' does not exist."
    exit 1
fi

# Navigate to project directory
echo "Navigate to project directory: $project_dir"
cd "$project_dir" || exit

# Check if tag or branch is specified
if [[ -n "$tag" ]]; then
    # Get latest tag
    tag=$(git describe --tags "$(git rev-list --tags --max-count=1)")
    # Checkout latest tag
    echo "Checkout tag: $tag"
    git fetch --tags && git checkout "$tag"
elif [[ -n "$branch" ]]; then
    # Pull from specific branch if specified
    pull_latest_codes "$branch"
else
    # Default to master branch
    branch="master"
    pull_latest_codes "$branch"
fi

# Install dependencies
echo "Install dependencies..."
yes | composer install

# Clear config caches
echo "Clear config caches..."
php artisan config:clear

# Clear view caches
echo "Clear view caches..."
php artisan view:clear

# Restart horizon
echo "Restart horizon..."
php artisan horizon:terminate

# Change project ownership to web server
echo "Change project ownership to web server..."
chown nginx:nginx "$project_dir" -R

# Clear the terminal
clear
